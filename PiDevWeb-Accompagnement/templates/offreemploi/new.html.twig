{% extends 'popup_base.html.twig' %}

{% block popup_content %}
    {{ form_start(form, {
        'attr': {
            'id': 'offreEmploiForm',
            'class': 'needs-validation',
            'novalidate': true,
            'data-turbo': 'false',
            'enctype': 'multipart/form-data'
        }
    }) }}

    <div class="row g-3 mb-4">
        <div class="col-md-8">
            {{ form_label(form.titre, "Job Title", {'label_attr': {'class': 'form-label fw-semibold'}}) }}
            {{ form_widget(form.titre, {
                'attr': {
                    'class': 'form-control' ~ (form.titre.vars.errors|length ? ' is-invalid' : ''),
                    'placeholder': 'Example: Senior Symfony Developer'
                }
            }) }}
            <div class="invalid-feedback">
                {% for error in form.titre.vars.errors %}
                    <div>{{ error.message }}</div>
                {% endfor %}
            </div>
        </div>

        <div class="col-md-4">
            {{ form_label(form.typeposte, 'Job Type', {'label_attr': {'class': 'form-label fw-semibold'}}) }}
            {{ form_widget(form.typeposte, {
                'attr': {
                    'class': 'form-select' ~ (form.typeposte.vars.errors|length ? ' is-invalid' : '')
                }
            }) }}
            <div class="invalid-feedback">
                {% for error in form.typeposte.vars.errors %}
                    <div>{{ error.message }}</div>
                {% endfor %}
            </div>
        </div>

        <div class="col-md-6">
            {{ form_label(form.typecontrat, 'Contract Type', {'label_attr': {'class': 'form-label fw-semibold'}}) }}
            {{ form_widget(form.typecontrat, {
                'attr': {
                    'class': 'form-select' ~ (form.typecontrat.vars.errors|length ? ' is-invalid' : '')
                }
            }) }}
            <div class="invalid-feedback">
                {% for error in form.typecontrat.vars.errors %}
                    <div>{{ error.message }}</div>
                {% endfor %}
            </div>
        </div>

        <div class="col-md-6">
            {{ form_label(form.emplacement, 'Location', {'label_attr': {'class': 'form-label fw-semibold'}}) }}
            {{ form_widget(form.emplacement, {
                'attr': {
                    'class': 'form-select' ~ (form.emplacement.vars.errors|length ? ' is-invalid' : '')
                }
            }) }}
            <div class="invalid-feedback">
                {% for error in form.emplacement.vars.errors %}
                    <div>{{ error.message }}</div>
                {% endfor %}
            </div>
        </div>

        <div class="col-md-6">
            {{ form_label(form.etat, 'Status', {'label_attr': {'class': 'form-label fw-semibold'}}) }}
            {{ form_widget(form.etat, {
                'attr': {
                    'class': 'form-select' ~ (form.etat.vars.errors|length ? ' is-invalid' : '')
                }
            }) }}
            <div class="invalid-feedback">
                {% for error in form.etat.vars.errors %}
                    <div>{{ error.message }}</div>
                {% endfor %}
            </div>
        </div>

        <div class="col-12">
            {{ form_label(form.description, 'Job Description', {'label_attr': {'class': 'form-label fw-semibold'}}) }}
            {{ form_widget(form.description, {
                'attr': {
                    'class': 'form-control' ~ (form.description.vars.errors|length ? ' is-invalid' : ''),
                    'rows': 6,
                    'placeholder': 'Describe the position, responsibilities, and required skills...'
                }
            }) }}
            <div class="invalid-feedback">
                {% for error in form.description.vars.errors %}
                    <div>{{ error.message }}</div>
                {% endfor %}
            </div>
        </div>

        <div class="col-md-6">
            {{ form_label(form.imageurl, 'Job Image', {'label_attr': {'class': 'form-label fw-semibold'}}) }}
            {{ form_widget(form.imageurl, {
                'attr': {
                    'class': 'form-control' ~ (form.imageurl.vars.errors|length ? ' is-invalid' : ''),
                    'accept': 'image/jpeg,image/png'
                }
            }) }}
            <div class="form-text">Accepted formats: JPEG or PNG (max 2MB)</div>
            <div class="invalid-feedback">
                {% for error in form.imageurl.vars.errors %}
                    <div>{{ error.message }}</div>
                {% endfor %}
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end gap-3 pt-3 border-top">
        <button type="button" class="btn btn-outline-secondary" onclick="window.close()">
            <i class="ti ti-x me-1"></i> Cancel
        </button>
        <button type="submit" class="btn btn-primary" id="submitButton">
            <i class="ti ti-check me-1"></i> Save Job
        </button>
    </div>

    {{ form_end(form) }}

    <script>
        document.getElementById('offreEmploiForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const form = e.target;
            const submitBtn = document.getElementById('submitButton');
            const originalBtnText = submitBtn.innerHTML;

            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = `
            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
            Saving...
        `;

            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: form.method,
                    body: formData,
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const data = await response.json();

                if (!response.ok) throw data;

                // SUCCESS CASE - notify parent window and close
                if (window.opener) {
                    // For window.open() popups
                    window.opener.postMessage({
                        type: 'jobOfferSaved',
                        success: true,
                        message: 'Job offer saved successfully!'
                    }, '*');
                } else if (window.parent) {
                    // For iframe in modal
                    window.parent.postMessage({
                        type: 'jobOfferSaved',
                        success: true,
                        message: 'Job offer saved successfully!'
                    }, '*');
                }

                // Close popup after short delay
                setTimeout(() => {
                    window.close();
                }, 500);

            } catch (error) {
                console.error('Form submission error:', error);

                // Handle validation errors
                if (error.status === 'invalid') {
                    for (const [field, message] of Object.entries(error.errors)) {
                        const input = form.querySelector(`[name*="${field}"]`);
                        if (input) {
                            input.classList.add('is-invalid');
                            const feedback = input.closest('.col-md-6, .col-md-8, .col-12')?.querySelector('.invalid-feedback');
                            if (feedback) {
                                feedback.innerHTML = `<div>${message}</div>`;
                            }
                        }
                    }

                    // Scroll to first error
                    const firstError = form.querySelector('.is-invalid');
                    if (firstError) {
                        firstError.scrollIntoView({
                            behavior: 'smooth',
                            block: 'center'
                        });
                    }
                } else {
                    // Show general error
                    alert(error.message || 'An error occurred while saving the job offer');
                }
            } finally {
                // Restore button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalBtnText;
            }
        });

        // Prevent accidental popup closing with unsaved changes
        window.addEventListener('beforeunload', (e) => {
            if (document.getElementById('offreEmploiForm').checkValidity()) {
                return undefined;
            }
            e.preventDefault();
            return e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
        });
    </script>
{% endblock %}