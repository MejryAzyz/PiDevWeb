{% extends 'base.html.twig' %}

{% block title %}Job Offers List{% endblock %}

{% block body %}
    <div class="container-fluid">
        <!-- Filter Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="card-title mb-0">Advanced Filters</h5>
                            <button type="button" class="btn btn-secondary btn-sm" id="resetFilters">
                                <i class="ti ti-refresh me-1"></i> Reset Filters
                            </button>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label for="jobTypeFilter" class="form-label">Job Type</label>
                                <select id="jobTypeFilter" class="form-select select2">
                                    <option value="">All Types</option>
                                    <option value="Full Time">Full Time</option>
                                    <option value="Part Time">Part Time</option>
                                    <option value="Contract">Contract</option>
                                    <option value="Temporary">Temporary</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="contractTypeFilter" class="form-label">Contract Type</label>
                                <select id="contractTypeFilter" class="form-select select2">
                                    <option value="">All Contracts</option>
                                    {% set contractTypes = [] %}
                                    {% for offer in offreemplois %}
                                        {% if offer.typecontrat not in contractTypes %}
                                            {% set contractTypes = contractTypes|merge([offer.typecontrat]) %}
                                        {% endif %}
                                    {% endfor %}
                                    {% for type in contractTypes|sort %}
                                        <option value="{{ type }}">{{ type }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="locationFilter" class="form-label">Location</label>
                                <select id="locationFilter" class="form-select select2">
                                    <option value="">All Locations</option>
                                    {% set locations = [] %}
                                    {% for offer in offreemplois %}
                                        {% if offer.emplacement not in locations %}
                                            {% set locations = locations|merge([offer.emplacement]) %}
                                        {% endif %}
                                    {% endfor %}
                                    {% for location in locations|sort %}
                                        <option value="{{ location }}">{{ location }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="statusFilter" class="form-label">Status</label>
                                <select id="statusFilter" class="form-select select2">
                                    <option value="">All Status</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                    </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="avatar-sm rounded bg-primary bg-opacity-10">
                                    <span class="avatar-title bg-primary bg-opacity-10 text-primary rounded">
                                        <i class="ti ti-briefcase fs-3"></i>
                                    </span>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <h4 class="mb-1 stats-total">{{ offreemplois|length }}</h4>
                                <p class="text-muted mb-0">Total Job Offers</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="avatar-sm rounded bg-success bg-opacity-10">
                                    <span class="avatar-title bg-success bg-opacity-10 text-success rounded">
                                        <i class="ti ti-check fs-3"></i>
                                    </span>
                                </div>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <h4 class="mb-1 stats-active">{{ offreemplois|filter(o => o.etat == 'active')|length }}</h4>
                                <p class="text-muted mb-0">Active Offers</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <div class="avatar-sm rounded bg-danger bg-opacity-10">
                                    <span class="avatar-title bg-danger bg-opacity-10 text-danger rounded">
                                        <i class="ti ti-x fs-3"></i>
                                    </span>
                </div>
            </div>
                            <div class="flex-grow-1 ms-3">
                                <h4 class="mb-1 stats-inactive">{{ offreemplois|filter(o => o.etat != 'active')|length }}</h4>
                                <p class="text-muted mb-0">Inactive Offers</p>
                            </div>
        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h4 class="card-title mb-0">Job Offers</h4>
                            <button type="button" class="btn btn-primary" onclick="loadJobOfferForm(null, 'new')">
                                <i class="fas fa-plus me-1"></i> New Job Offer
                            </button>
                        </div>
                <div class="table-responsive">
                            <table class="table table-centered table-hover dt-responsive nowrap w-100" id="offers-datatable">
                                <thead class="table-light">
                        <tr>
                                        <th>Title</th>
                                        <th>Type</th>
                                        <th>Contract</th>
                            <th>Location</th>
                                        <th>Publication Date</th>
                            <th>Status</th>
                                        <th class="text-end">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for offreemploi in offreemplois %}
                                    <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                                {% if offreemploi.imageurl %}
                                                    <img src="{{ asset('uploads/offers/' ~ offreemploi.imageurl) }}" 
                                                         alt="Job image" 
                                                         class="rounded-circle me-2"
                                                         width="32">
                                                {% else %}
                                                    <div class="avatar-sm me-2">
                                                        <span class="avatar-title bg-primary-subtle text-primary rounded-circle">
                                                            {{ offreemploi.titre|first|upper }}
                                                        </span>
                                        </div>
                                                {% endif %}
                                        <div>
                                                    <h5 class="font-14 mb-0">{{ offreemploi.titre }}</h5>
                                                    <small class="text-muted">ID: #{{ offreemploi.id }}</small>
                                        </div>
                                    </div>
                                </td>
                                        <td><span class="badge bg-primary-subtle text-primary">{{ offreemploi.typeposte }}</span></td>
                                        <td><span class="badge bg-info-subtle text-info">{{ offreemploi.typecontrat }}</span></td>
                                <td>
                                            <i class="ti ti-map-pin me-1 text-muted"></i>
                                        {{ offreemploi.emplacement }}
                                </td>
                                        <td>{{ offreemploi.datepublication ? offreemploi.datepublication|date('Y-m-d') : '' }}</td>
                                <td>
                                            <span class="badge bg-{{ offreemploi.etat == 'active' ? 'success' : 'danger' }}-subtle 
                                                         text-{{ offreemploi.etat == 'active' ? 'success' : 'danger' }}">
                                        {{ offreemploi.etat|capitalize }}
                                    </span>
                                </td>
                                        <td class="text-end">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-light btn-sm show-offer" data-id="{{ offreemploi.id }}">
                                                    <i class="ti ti-eye"></i>
                                                </button>
                                                <button type="button" class="btn btn-light btn-sm" onclick="loadJobOfferForm({{ offreemploi.id }})">
                                                    <i class="ti ti-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-light btn-sm" onclick="toggleOfferStatus({{ offreemploi.id }}, '{{ offreemploi.etat }}')">
                                                    <i class="ti ti-{{ offreemploi.etat == 'active' ? 'x' : 'check' }}"></i>
                                            </button>
                                                <button type="button" class="btn btn-light btn-sm text-danger" onclick="deleteJobOffer({{ offreemploi.id }})">
                                                    <i class="ti ti-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="jobOfferModal" tabindex="-1" aria-labelledby="jobOfferModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <h5 class="modal-title" id="jobOfferModalLabel">Job Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="jobOfferModalBody">
                    <!-- Form will be loaded here -->
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .avatar-sm {
            height: 2rem;
            width: 2rem;
        }
        .avatar-title {
            align-items: center;
            display: flex;
            font-weight: 500;
            height: 100%;
            justify-content: center;
            width: 100%;
        }
        .font-14 {
            font-size: 14px !important;
        }
        .btn-group .btn + .btn {
            margin-left: 0.25rem;
        }
        .btn-light {
            background-color: #f8f9fa;
            border-color: #f8f9fa;
        }
        .btn-light:hover {
            background-color: #e9ecef;
            border-color: #e9ecef;
        }
        .table > :not(caption) > * > * {
            padding: 1rem 0.75rem;
        }
        /* Add styles for Select2 dropdowns */
        .select2-container--default .select2-selection--single {
            height: calc(1.5em + 0.75rem + 2px);
            padding: 0.375rem 0.75rem;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
        }
        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 1.5;
            padding-left: 0;
            color: #6c757d;
        }
        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: calc(1.5em + 0.75rem + 2px);
        }
        .form-label {
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
            color: #6c757d;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Select2 for filters
            $('.select2').select2({
                width: '100%',
                placeholder: 'Select an option',
                allowClear: true
            });

            // Add filter event listeners
            $('.select2').on('change', function() {
                loadFilteredData();
            });

            // Reset filters
            $('#resetFilters').on('click', function() {
                $('.select2').val(null).trigger('change');
            });
        });

        function loadJobOfferForm(id = null) {
            const url = id ? `/offreemploi/${id}/edit` : '/offreemploi/new';
            const modalTitle = id ? 'Edit Job Offer' : 'New Job Offer';
            
            // Show loading state in modal
            const modal = document.getElementById('jobOfferModal');
            const modalBody = modal.querySelector('.modal-body');
            modalBody.innerHTML = `
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading form...</p>
                </div>
            `;
            
            // Show the modal immediately with loading state
            const modalInstance = new bootstrap.Modal(modal);
            modalInstance.show();
            
            // Update modal title
            modal.querySelector('.modal-title').textContent = modalTitle;
            
            // Fetch the form
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                modalBody.innerHTML = html;
                
                // Initialize form validation and Select2
                const form = modalBody.querySelector('form');
                if (form) {
                    form.addEventListener('submit', handleFormSubmit);

                    // Initialize Select2 for all select elements in the form
                    $(form).find('select').each(function() {
                        $(this).select2({
                            dropdownParent: modal,
                            width: '100%',
                            placeholder: $(this).attr('placeholder') || 'Select an option',
                            allowClear: true
                        });
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                modalBody.innerHTML = `
                    <div class="alert alert-danger" role="alert">
                        <h4 class="alert-heading">Error Loading Form</h4>
                        <p>Failed to load the form. Please try again.</p>
                        <hr>
                        <p class="mb-0">Error details: ${error.message}</p>
                    </div>
                `;
            });
        }

        function handleFormSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const submitButton = form.querySelector('button[type="submit"]');
            const formData = new FormData(form);

            // Reset previous validation state
            form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            form.querySelectorAll('.invalid-feedback').forEach(el => el.innerHTML = '');
            const errorAlert = form.querySelector('.alert-danger');
            if (errorAlert) {
                errorAlert.remove();
            }

            // Show loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Saving...';

            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.status === 'success') {
                    // Show success message and close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('jobOfferModal'));
                    modal.hide();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    // Show validation errors
                    const alert = document.createElement('div');
                    alert.className = 'alert alert-danger alert-dismissible fade show mb-4';
                    alert.innerHTML = `
                        <div class="d-flex">
                            <div class="flex-shrink-0">
                                <i class="ti ti-alert-circle fs-4"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <h5 class="alert-heading">Form Validation Errors</h5>
                                <p class="mb-0">${data.message}</p>
                            </div>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;
                    form.insertBefore(alert, form.firstChild);

                    // Display field-specific errors
                    if (data.errors) {
                        Object.entries(data.errors).forEach(([field, messages]) => {
                            const input = form.querySelector(`[name="offreemploi[${field}]"]`);
                            if (input) {
                                input.classList.add('is-invalid');
                                const feedback = input.parentElement.querySelector('.invalid-feedback');
                                if (feedback) {
                                    feedback.innerHTML = Array.isArray(messages) ? messages.join('<br>') : messages;
                                }
                            }
                        });
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                const alert = document.createElement('div');
                alert.className = 'alert alert-danger alert-dismissible fade show mb-4';
                alert.innerHTML = `
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <i class="ti ti-alert-circle fs-4"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5 class="alert-heading">Error</h5>
                            <p class="mb-0">An error occurred while saving. Please try again.</p>
                            <small class="text-muted">${error.message}</small>
                        </div>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                form.insertBefore(alert, form.firstChild);
            })
            .finally(() => {
                // Reset button state
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="ti ti-device-floppy me-1"></i>Save';
            });
        }

        function loadFilteredData() {
            const filters = {
                jobType: $('#jobTypeFilter').val(),
                contractType: $('#contractTypeFilter').val(),
                location: $('#locationFilter').val(),
                status: $('#statusFilter').val()
            };

            // Show loading state
            $('#offers-datatable tbody').html('<tr><td colspan="7" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></td></tr>');

            // Build query string
            const queryString = Object.entries(filters)
                .filter(([_, value]) => value)
                .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
                .join('&');

            // Make AJAX request
            fetch(`{{ path('app_offreemploi_index') }}${queryString ? '?' + queryString : ''}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(response => {
                if (response.success) {
                    updateTable(response.data);
                    updateStatistics(response.stats);
                } else {
                    throw new Error('Failed to load data');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to load data. Please try again.'
                });
            });
        }

        function updateTable(data) {
            const tbody = document.querySelector('#offers-datatable tbody');
            tbody.innerHTML = '';

            if (data.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center">No matching records found</td></tr>';
                return;
            }

            data.forEach(offer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="d-flex align-items-center">
                            ${offer.imageurl ? 
                                `<img src="{{ asset('uploads/offers/') }}/${offer.imageurl}" 
                                      alt="Job image" 
                                      class="rounded-circle me-2"
                                      width="32">` :
                                `<div class="avatar-sm me-2">
                                    <span class="avatar-title bg-primary-subtle text-primary rounded-circle">
                                        ${offer.titre.charAt(0).toUpperCase()}
                                    </span>
                                </div>`
                            }
                            <div>
                                <h5 class="font-14 mb-0">${offer.titre}</h5>
                                <small class="text-muted">ID: #${offer.id}</small>
                            </div>
                        </div>
                    </td>
                    <td><span class="badge bg-primary-subtle text-primary">${offer.typeposte}</span></td>
                    <td><span class="badge bg-info-subtle text-info">${offer.typecontrat}</span></td>
                    <td><i class="ti ti-map-pin me-1 text-muted"></i>${offer.emplacement}</td>
                    <td>${offer.datepublication}</td>
                    <td>
                        <span class="badge bg-${offer.etat === 'active' ? 'success' : 'danger'}-subtle 
                                     text-${offer.etat === 'active' ? 'success' : 'danger'}">
                            ${offer.etat.charAt(0).toUpperCase() + offer.etat.slice(1)}
                        </span>
                    </td>
                    <td class="text-end">
                        <div class="btn-group">
                            <button type="button" class="btn btn-light btn-sm show-offer" data-id="${offer.id}">
                                <i class="ti ti-eye"></i>
                            </button>
                            <button type="button" class="btn btn-light btn-sm" onclick="loadJobOfferForm(${offer.id})">
                                <i class="ti ti-edit"></i>
                            </button>
                            <button type="button" class="btn btn-light btn-sm" onclick="toggleOfferStatus(${offer.id}, '${offer.etat}')">
                                <i class="ti ti-${offer.etat === 'active' ? 'x' : 'check'}"></i>
                            </button>
                            <button type="button" class="btn btn-light btn-sm text-danger" onclick="deleteJobOffer(${offer.id})">
                                <i class="ti ti-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // Add event listener for show buttons
            document.querySelectorAll('.show-offer').forEach(button => {
                button.addEventListener('click', function() {
                    const id = this.getAttribute('data-id');
                    window.location.href = `/offreemploi/${id}`;
                });
            });
        }

        function updateStatistics(stats) {
            $('.stats-total').text(stats.total);
            $('.stats-active').text(stats.active);
            $('.stats-inactive').text(stats.inactive);
        }

        function deleteJobOffer(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    const url = `{{ path('app_offreemploi_delete', {'id': 'ID'}) }}`.replace('ID', id);
                    const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                    
                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `_token=${token}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: data.message,
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => {
                    window.location.reload();
                            });
                        } else {
                            throw new Error(data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to delete the job offer. Please try again.'
                        });
                    });
                }
            });
        }

        function toggleOfferStatus(id, currentStatus) {
            const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
            const message = currentStatus === 'active' ? 'deactivate' : 'activate';

            Swal.fire({
                title: 'Are you sure?',
                text: `Do you want to ${message} this job offer?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, proceed!'
            }).then((result) => {
                if (result.isConfirmed) {
                    const url = `{{ path('app_offreemploi_toggle_status', {'id': 'ID'}) }}`.replace('ID', id);
                    
                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            Swal.fire({
                                icon: 'success',
                                title: 'Status Updated',
                                text: data.message,
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            throw new Error(data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to update the job offer status. Please try again.'
                        });
                    });
                }
            });
        }
    </script>
{% endblock %}
