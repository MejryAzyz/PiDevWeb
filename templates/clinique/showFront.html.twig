{% extends 'baseFront.html.twig' %}

{% block title %}{{ clinique.nom }} - Détails{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .carousel-item img {
            height: 500px;
            object-fit: cover;
            width: 100%;
        }
        .carousel-control-prev,
        .carousel-control-next {
            background-color: rgba(0,0,0,0.3);
            width: 50px;
            height: 50px;
            border-radius: 50%;
            top: 50%;
            transform: translateY(-50%);
        }
        .carousel-indicators {
            bottom: 20px;
        }
        .carousel-indicators button {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin: 0 5px;
        }
        .export-pdf-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
            box-shadow: 2px 2px 10px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }
        .export-pdf-btn:hover {
             transform: translateY(-2px);
             box-shadow: 4px 4px 12px rgba(0,0,0,0.3);
        }
        @media print {
            .no-print {
                display: none !important;
            }
            body {
                background: white !important;
            }
            .pdf-content {
                box-shadow: none !important;
                padding: 0 !important;
            }
            /* Hide appointment section in print/PDF */
            .appointment-section {
                display: none !important;
            }
        }
        .pdf-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            max-width: 800px;
            margin: 0 auto;
        }
        .pdf-title {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
        }
        .pdf-title h1 {
            font-size: 28px;
            color: #333;
            margin-bottom: 10px;
        }
        .pdf-title p {
            color: #666;
            font-size: 16px;
        }
        .pdf-logo {
            max-width: 50px; /* Adjust size as needed */
            max-height: 50px;
        }
        .no-print {
             display: block;
        }
         @media print {
            .no-print {
                 display: none !important;
            }
         }
        /* Styles spécifiques pour l'élément cloné lors de la capture PDF */
        .pdf-capture-clone {
            position: absolute !important;
            left: 0px !important; /* Positionné à gauche pour la capture */
            top: 0px !important;
            z-index: -1 !important; /* Invisible pour l'utilisateur */
            width: 992px !important; /* Largeur type col-lg-8 pour forcer le rendu */
            background: white !important; /* Fond blanc explicite */
            padding: 15px !important; /* Ajouter un peu de padding interne si besoin */
            overflow: visible !important;
            box-shadow: none !important;
        }
        .pdf-capture-clone .card {
             box-shadow: none !important; /* Enlever les ombres des cartes dans le clone */
             border: 1px solid #eee !important; /* Ajouter une bordure légère si désiré */
        }
    </style>
{% endblock %}

{% block body %}
<div class="rt-breadcump rt-breadcump-height">
    <div class="rt-page-bg rtbgprefix-cover" style="background-image: url({{ asset('coderthemes.com/osen/layouts/assets/images/backgrounds/bredcump.png') }})">
    </div>
    <div class="container">
        <div class="row rt-breadcump-height">
            <div class="col-12">
                <div class="breadcrumbs-content">
                    <h3>{{ clinique.nom }}</h3>
                    <div class="breadcrumbs">
                        <span class="divider"><i class="icofont-home"></i></span>
                        <a href="{{ path('app_clinique_front_index') }}" title="Accueil">Accueil</a>
                        <span class="divider"><i class="icofont-simple-right"></i></span>
                        <a href="{{ path('app_clinique_front_index') }}" title="Cliniques">Cliniques</a>
                        <span class="divider"><i class="icofont-simple-right"></i></span>
                        {{ clinique.nom }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<section class="content-area">
    <div class="container">
        <div class="row">
            <!-- Section principale -->
            <div class="col-lg-8">
                <!-- Bouton d'export PDF -->
                <button class="btn btn-primary export-pdf-btn no-print" onclick="generateWowPDFV3()">
                    <i class="icofont-print"></i> Imprimer Fiche Pro
                </button>

                <!-- Titre pour le PDF -->
                <div class="pdf-title">
                    <h1>{{ clinique.nom }}</h1>
                    <p>Informations détaillées de la clinique</p>
                </div>

                <!-- Galerie d'images -->
                <div class="card mb-4">
                    <div class="card-body p-0">
                        {% if clinique.cliniquePhotos|length > 0 %}
                            <div id="cliniqueCarousel" class="carousel slide" data-ride="carousel">
                                <ol class="carousel-indicators">
                                    {% for photo in clinique.cliniquePhotos %}
                                        <li data-target="#cliniqueCarousel" data-slide-to="{{ loop.index0 }}" {% if loop.first %}class="active"{% endif %}></li>
                                    {% endfor %}
                                </ol>
                                <div class="carousel-inner">
                                    {% for photo in clinique.cliniquePhotos %}
                                        <div class="carousel-item {% if loop.first %}active{% endif %}">
                                            <img src="{{ asset(photo.photo_url) }}" class="d-block w-100" alt="Photo de la clinique">
                                        </div>
                                    {% endfor %}
                                </div>
                                <a class="carousel-control-prev" href="#cliniqueCarousel" role="button" data-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next" href="#cliniqueCarousel" role="button" data-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>
                        {% else %}
                            <div class="text-center">
                                <img src="{{ asset('images/mayoClinic.jpg') }}" class="img-fluid" style="height: 500px; width: 100%; object-fit: cover;" alt="Image par défaut">
                            </div>
                        {% endif %}
                    </div>
                </div>

                <!-- Miniatures des photos -->
                {% if clinique.cliniquePhotos|length > 0 %}
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="row g-2">
                                {% for photo in clinique.cliniquePhotos %}
                                    <div class="col-md-3">
                                        <img src="{{ asset(photo.photo_url) }}" 
                                             class="img-thumbnail cursor-pointer" 
                                             style="height: 100px; width: 100%; object-fit: cover;"
                                             onclick="document.getElementById('cliniqueCarousel').carousel({{ loop.index0 }})"
                                             alt="Miniature">
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                {% endif %}

                <!-- Informations de la clinique -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h4 class="card-title mb-4">À propos de {{ clinique.nom }}</h4>
                        <p class="lead">{{ clinique.description }}</p>
                        <hr>
                        <div class="row">
                            <div class="col-md-6">
                                <h5>Informations de contact</h5>
                                <ul class="list-unstyled">
                                    <li><i class="icofont-location-pin"></i> {{ clinique.adresse }}</li>
                                    <li><i class="icofont-phone"></i> {{ clinique.telephone }}</li>
                                    <li><i class="icofont-email"></i> {{ clinique.email }}</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h5>Tarifs</h5>
                                <p class="text-primary h4">{{ clinique.prix|number_format(2) }} €</p>
                                <small class="text-muted">Prix par consultation</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Liste des docteurs -->
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title mb-4">Nos Docteurs</h4>
                        <div class="row">
                            {% for docteur in clinique.docteurs %}
                                <div class="col-md-6 mb-4">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h5 class="card-title">{{ docteur.nom }} {{ docteur.prenom }}</h5>
                                            <h6 class="card-subtitle mb-2 text-muted">{{ docteur.specialite.nom }}</h6>
                                            <p class="card-text">
                                                <small class="text-muted">
                                                    <i class="icofont-phone"></i> {{ docteur.telephone }}<br>
                                                    <i class="icofont-email"></i> {{ docteur.email }}
                                                </small>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            {% else %}
                                <div class="col-12">
                                    <p class="text-muted">Aucun docteur disponible pour le moment.</p>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4 appointment-section">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Prendre rendez-vous</h5>
                        <p class="card-text">Pour prendre rendez-vous avec l'un de nos docteurs, veuillez nous contacter directement.</p>
                        <a href="tel:{{ clinique.telephone }}" class="btn btn-primary btn-block">
                            <i class="icofont-phone"></i> Appeler maintenant
                        </a>
                        <a href="mailto:{{ clinique.email }}" class="btn btn-outline-primary btn-block mt-2">
                            <i class="icofont-email"></i> Envoyer un email
                        </a>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Localisation</h5>
                        <div class="embed-responsive embed-responsive-16by9">
                            <!-- Vous pouvez ajouter une carte Google Maps ici -->
                            <iframe class="embed-responsive-item" src="https://www.google.com/maps/embed/v1/place?key=YOUR_API_KEY&q={{ clinique.adresse|url_encode }}" allowfullscreen></iframe>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script>
        // Fonction pour échapper les caractères pour JavaScript
        function escapeJs(str) {
            if (str === null || str === undefined) return '';
            return String(str)
                .replace(/[\'"\\\n\r\u2028\u2029]/g, function (character) {
                    switch (character) {
                        case '\'': case '\"': case '\\': return '\\' + character;
                        case '\n': return '\\n';
                        case '\r': return '\\r';
                        case '\u2028': return '\\u2028';
                        case '\u2029': return '\\u2029';
                    }
                });
        }
        
        async function generateWowPDFV3() {
            const button = document.querySelector('.export-pdf-btn');
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="icofont-spinner icofont-spin"></i> Génération Fiche Pro...';
            button.disabled = true;

            // --- Récupération des données --- 
            const clinique = {
                nom: "{{ clinique.nom|raw|escape('js') }}",
                description: "{{ clinique.description|raw|escape('js') }}",
                adresse: "{{ clinique.adresse|raw|escape('js') }}",
                telephone: "{{ clinique.telephone|raw|escape('js') }}",
                email: "{{ clinique.email|raw|escape('js') }}",
                prix: "{{ clinique.prix|number_format(2, ',', ' ') }} €",
                photoUrl: "{% if clinique.cliniquePhotos|length > 0 %}{{ asset(clinique.cliniquePhotos[0].photo_url)|escape('js') }}{% else %}{{ asset('images/mayoClinic.jpg')|escape('js') }}{% endif %}",
                docteurs: [
                    {% for docteur in clinique.docteurs %}
                    {
                        nom: "{{ docteur.nom|raw|escape('js') }}",
                        prenom: "{{ docteur.prenom|raw|escape('js') }}",
                        specialite: "{{ docteur.specialite.nom|raw|escape('js') }}",
                        telephone: "{{ docteur.telephone|raw|escape('js') }}",
                        email: "{{ docteur.email|raw|escape('js') }}"
                    }{{ not loop.last ? ',' : '' }}
                    {% endfor %}
                ]
            };

            // --- Préchargement des Images --- 
            const loadImage = (src, defaultSrc) => {
                return new Promise((resolve, reject) => {
                    const img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = () => resolve(img);
                    img.onerror = (err) => {
                        console.error("ERREUR CHARGEMENT IMAGE:", src, "(Default tenté:", defaultSrc, ")", err);
                        if (defaultSrc && src !== defaultSrc) {
                             console.warn("Tentative de chargement de l'image par défaut...");
                             const defaultImg = new Image();
                             defaultImg.crossOrigin = "Anonymous";
                             defaultImg.onload = () => resolve(defaultImg);
                             defaultImg.onerror = (err2) => reject({ src: defaultSrc, error: err2, originalSrc: src });
                             defaultImg.src = defaultSrc;
                        } else {
                            reject({ src, error: err });
                        }
                    };
                    img.src = src;
                });
            };

            let logoImage, cliniquePhotoImg;
            
            const logoPath = "{{ asset('coderthemes.com/osen/layouts/assets/images/logo2.PNG') }}"; 
            const defaultCliniquePhoto = "{{ asset('images/mayoClinic.jpg') }}";

            try {
                logoImage = await loadImage(logoPath, null); 
                cliniquePhotoImg = await loadImage(clinique.photoUrl, defaultCliniquePhoto);
                console.log("Logo et image clinique chargés (ou défaut).");
            } catch (errorInfo) {
                let userMessage = `Erreur chargement image : ${errorInfo.src}. `; 
                if (errorInfo.src === logoPath || errorInfo.originalSrc === logoPath) {
                    userMessage = `ERREUR CRITIQUE : Logo INTROUVABLE à ${logoPath}. Assurez-vous que le fichier est dans le dossier \'public/images/\' et que le nom du fichier dans le code est CORRECT. PDF non généré.`;
                } else {
                    userMessage = `Erreur chargement image clinique : ${errorInfo.originalSrc || errorInfo.src}. Vérifiez son accessibilité. PDF non généré.`;
                }
                alert(userMessage);
                button.innerHTML = originalText; button.disabled = false;
                return;
            }
            // --- Fin Préchargement --- 

            // ===========================================================
            // --- Construction du Document PDF Premium V3.2 (Style Docteur) --- 
            // ===========================================================
            try {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
                doc.getFontList();
                doc.setFont('helvetica'); 

                const pageWidth = doc.internal.pageSize.getWidth();
                const pageHeight = doc.internal.pageSize.getHeight();
                const margin = 18; 
                const contentWidth = pageWidth - (2 * margin);
                let currentY = margin;
                let pageNum = 1;
                const primaryColor = '#0056b3'; 
                const secondaryColor = '#495057'; 
                const lightGrayColor = '#f1f3f5';
                const borderColor = '#ced4da'; 
                const textDefaultColor = '#212529'; 
                const labelColor = '#9c0322'; 
                const specColor = '#045939';

                //
                const checkPageBreak = (heightNeeded) => {
                    const footerHeight = 18; 
                    if (currentY + heightNeeded > pageHeight - margin - footerHeight) {
                        addFooter();
                        doc.addPage();
                        pageNum++;
                        addHeader();
                        return true;
                    }
                    return false;
                };
                 const addFooter = () => {
                     const footerY = pageHeight - 12;
                     doc.setFontSize(8);
                     doc.setTextColor(secondaryColor);
                     doc.text(`Fiche d'information clinique générée le ${new Date().toLocaleDateString('fr-FR')}`, margin, footerY);
                     doc.text(`Page ${pageNum}`, pageWidth - margin, footerY, { align: 'right' });
                     doc.setDrawColor(borderColor);
                     doc.setLineWidth(0.1);
                     doc.line(margin, footerY - 3, pageWidth - margin, footerY - 3); 
                 }; 
                const addHeader = () => {
                    const headerLineY = margin + 22;
                    if (logoImage) {
                        let logoW = 30; 
                        let logoH = (logoImage.height / logoImage.width) * logoW;
                        if (logoH > 18) { logoH = 18; logoW = (logoImage.width / logoImage.height) * logoH; }
                        doc.addImage(logoImage, 'PNG', margin, margin - 6, logoW, logoH);
                    }
                    doc.setFont('helvetica', 'bold');
                    doc.setFontSize(24); 
                    doc.setTextColor(primaryColor);
                    doc.text(clinique.nom, pageWidth - margin, margin + 8, { align: 'right' });
                    doc.setFont('helvetica', 'normal');
                    doc.setFontSize(10);
                    doc.setTextColor(secondaryColor);
                    doc.text("Fiche d'Information Professionnelle", pageWidth - margin, margin + 14, { align: 'right' });
                    doc.setDrawColor(primaryColor);
                    doc.setLineWidth(0.4);
                    doc.line(margin, headerLineY, pageWidth - margin, headerLineY);
                    currentY = headerLineY + 10; 
                };

                // === DÉBUT DU CONTENU === 
                addHeader();

                // --- Image Principale --- 
                if (cliniquePhotoImg && cliniquePhotoImg.width > 0) {
                    const photoRatio = cliniquePhotoImg.height / cliniquePhotoImg.width;
                    const photoHeight = contentWidth * photoRatio;
                    let photoDisplayHeight = Math.min(photoHeight, 75); 
                    if(checkPageBreak(photoDisplayHeight + 8)) { currentY = margin + 22 + 10; } 
                    doc.setDrawColor(borderColor);
                    doc.setLineWidth(0.3);
                    doc.rect(margin - 0.5, currentY - 0.5, contentWidth + 1, photoDisplayHeight + 1); 
                    doc.addImage(cliniquePhotoImg, 'PNG', margin, currentY, contentWidth, photoDisplayHeight);
                    currentY += photoDisplayHeight + 12; 
                }

                // --- Bloc Informations Essentielles --- 
                const infoBlockStartY_A = currentY;
                let infoBlockHeightEstimate_A = 8 + 5 * 8; 
                if(checkPageBreak(infoBlockHeightEstimate_A)) { currentY = margin + 22 + 10; } 
                doc.setFillColor(lightGrayColor);
                doc.setDrawColor(borderColor);
                doc.setLineWidth(0.2);
                let tempY_info_A = currentY + 8; 
                const lineHeightInfo_A = 7;
                tempY_info_A += lineHeightInfo_A * 4;
                let actualInfoBlockHeight_A = tempY_info_A - currentY + 4; 
                doc.roundedRect(margin, currentY - 2, contentWidth, actualInfoBlockHeight_A, 3, 3, 'FD'); 
                doc.setFont('helvetica', 'bold');
                doc.setFontSize(13);
                doc.setTextColor(primaryColor);
                doc.text("Informations Essentielles", margin + 5, currentY + 5);
                currentY += 12;
                const labelX_A = margin + 7;
                const valueX_A = labelX_A + 18;
                const infoMaxWidth_A = contentWidth - 25;
                doc.setFont('helvetica', 'bold');
                doc.setFontSize(10);
                doc.setTextColor(labelColor);
                doc.text('Adresse:', labelX_A, currentY); 
                doc.setFont('helvetica', 'normal');
                doc.setTextColor(secondaryColor); 
                doc.text(clinique.adresse, valueX_A, currentY, { maxWidth: infoMaxWidth_A }); 
                currentY += lineHeightInfo_A;
                if(checkPageBreak(lineHeightInfo_A)) { currentY = margin + 22 + 10; }
                doc.setFont('helvetica', 'bold');
                doc.setTextColor(labelColor);
                doc.text('Tél:', labelX_A, currentY); 
                doc.setFont('helvetica', 'normal');
                doc.setTextColor(secondaryColor); 
                doc.text(clinique.telephone, valueX_A, currentY, { maxWidth: infoMaxWidth_A }); 
                currentY += lineHeightInfo_A;
                if(checkPageBreak(lineHeightInfo_A)) { currentY = margin + 22 + 10; }
                doc.setFont('helvetica', 'bold');
                doc.setTextColor(labelColor);
                doc.text('Email:', labelX_A, currentY); 
                doc.setFont('helvetica', 'normal');
                doc.setTextColor(secondaryColor); 
                doc.text(clinique.email, valueX_A, currentY, { maxWidth: infoMaxWidth_A }); 
                currentY += lineHeightInfo_A;
                if(checkPageBreak(lineHeightInfo_A)) { currentY = margin + 22 + 10; }
                doc.setFont('helvetica', 'bold');
                doc.setTextColor(labelColor);
                doc.text('Tarif:', labelX_A, currentY); 
                doc.setFont('helvetica', 'normal');
                doc.setTextColor(secondaryColor); 
                doc.text(`${clinique.prix} (indicatif)`, valueX_A, currentY, { maxWidth: infoMaxWidth_A }); 
                currentY += lineHeightInfo_A + 8; 

                // --- Bloc À Propos --- 
                let aboutTitleHeight = 8;
                if(checkPageBreak(aboutTitleHeight)) { currentY = margin + 22 + 10; }
                doc.setFont('helvetica', 'bold');
                doc.setFontSize(13);
                doc.setTextColor(primaryColor);
                doc.text("À Propos de " + clinique.nom, margin, currentY);
                currentY += 8;
                doc.setFont('helvetica', 'normal');
                doc.setFontSize(10);
                doc.setTextColor(secondaryColor);
                const splitDesc = doc.splitTextToSize(clinique.description, contentWidth);
                let descHeight = splitDesc.length * (doc.getLineHeight() / doc.internal.scaleFactor * 1.1);
                if(checkPageBreak(descHeight + 10)) { currentY = margin + 22 + 10; }
                doc.text(splitDesc, margin, currentY);
                currentY += descHeight + 12; 

                // --- Bloc Notre Équipe Médicale (Style V3.2) --- 
                let teamTitleHeight = 8;
                 if(checkPageBreak(teamTitleHeight)) { currentY = margin + 22 + 10; }

                doc.setFont('helvetica', 'bold');
                doc.setFontSize(13);
                doc.setTextColor(primaryColor);
                doc.text("Notre Équipe Médicale", margin, currentY);
                currentY += 10; // Espace après titre

                if (clinique.docteurs.length > 0) {
                    const docLabelX = margin + 5; // Indentation pour les labels du docteur
                    const docValueX = docLabelX + 25; // Indentation pour les valeurs (plus d'espace)
                    const docMaxWidth = contentWidth - 30; // Largeur max pour les valeurs
                    const docLineHeight = 6; // Hauteur de ligne pour les détails docteur
                    const blockPadding = 4; // Padding vertical dans le bloc docteur

                    clinique.docteurs.forEach((docData, index) => {
                        let doctorBlockStartY = currentY;
                        let estimatedHeight = 8 + (docLineHeight * 3) + (blockPadding * 2) + 6; // Nom + Spé + Tél + Email + Paddings + Ligne
                        if (checkPageBreak(estimatedHeight)) {
                             currentY = margin + 22 + 10; 
                             doc.setFont('helvetica', 'bold'); doc.setFontSize(13); doc.setTextColor(primaryColor);
                             doc.text("Notre Équipe Médicale", margin, currentY);
                             currentY += 10;
                             doctorBlockStartY = currentY; // Mettre à jour le début du bloc après saut
                        }
                        
                        currentY += blockPadding; // Espace haut du bloc

                        // Nom Docteur (en gras, taille standard)
                        doc.setFont('helvetica', 'bold');
                        doc.setFontSize(11);
                        doc.setTextColor(textDefaultColor); 
                        doc.text(`Dr. ${docData.prenom} ${docData.nom}`, margin, currentY);
                        currentY += docLineHeight;
                        
                        // Spécialité (en gras, couleur primaire)
                        doc.setFont('helvetica', 'bold');
                        doc.setFontSize(10);
                        doc.setTextColor(specColor); 
                        doc.text(docData.specialite, margin + 5, currentY); // Léger retrait pour la spé
                        currentY += docLineHeight + 1; // Espace après spécialité
                        
                        // Ligne Contact Tél
                        doc.setFont('helvetica', 'bold');
                        doc.setFontSize(9);
                        doc.setTextColor(labelColor); 
                        doc.text('Tél:', docLabelX, currentY);
                        doc.setFont('helvetica', 'normal');
                        doc.setTextColor(secondaryColor); 
                        doc.text(docData.telephone, docValueX, currentY, { maxWidth: docMaxWidth });
                        currentY += docLineHeight - 1;

                        // Ligne Contact Email
                        // checkPageBreak interne peu probable ici vu la faible hauteur, mais on peut l'ajouter si besoin
                        doc.setFont('helvetica', 'bold');
                        doc.setFontSize(9);
                        doc.setTextColor(labelColor); 
                        doc.text('Email:', docLabelX, currentY);
                        doc.setFont('helvetica', 'normal');
                        doc.setTextColor(secondaryColor); 
                        doc.text(docData.email, docValueX, currentY, { maxWidth: docMaxWidth });
                        currentY += docLineHeight -1 + blockPadding; // Espace bas du bloc

                        // Optionnel : Boîte autour de chaque docteur
                         doc.setDrawColor(borderColor);
                         doc.setLineWidth(0.1);
                         doc.rect(margin, doctorBlockStartY, contentWidth, currentY - doctorBlockStartY); 

                        // Ligne séparatrice (plus esthétique)
                        if (index < clinique.docteurs.length - 1) {
                            doc.setDrawColor(borderColor);
                            doc.setLineWidth(0.1);
                            doc.line(margin + 10, currentY, pageWidth - margin - 10, currentY); // Ligne encore plus courte
                            currentY += 5; // Espace après ligne
                        }
                    });
                } else {
                     if(checkPageBreak(10)) { currentY = margin + 22 + 10; }
                     doc.setFont('helvetica', 'italic');
                     doc.setFontSize(10);
                     doc.setTextColor(secondaryColor);
                     doc.text("Aucun docteur n'est actuellement associé à cette clinique.", margin, currentY, { maxWidth: contentWidth });
                     currentY += 10;
                }

                // --- Finalisation --- 
                 if (!(currentY + 1 > pageHeight - margin - 18)) {
                     addFooter();
                 }

                // --- Sauvegarde --- 
                doc.save(`${clinique.nom.replace(/\s+/g, '_')}_fiche_pro.pdf`);

            } catch (error) {
                console.error("Erreur lors de la construction du PDF V3:", error);
                alert("Une erreur technique s'est produite lors de la génération du PDF Premium.");
            } finally {
                button.innerHTML = originalText; button.disabled = false;
            }
            // ===========================================================
            // --- Fin Construction PDF --- 
            // ===========================================================
        }
    </script>
{% endblock %} 